import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

TOKEN = "8426552375:AAF3V40mXgUSGEFKncOiv_tQ_L07kVbqZyA"

bot = Bot(token=TOKEN)
dp = Dispatcher()


# --- –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
class VolunteerForm(StatesGroup):
    name = State()
    age = State()
    phone = State()
    topics = State()


# --- /start ---
@dp.message(F.text == "/start")
async def start_cmd(message: Message):
    kb = InlineKeyboardBuilder()
    kb.button(text="–°–±–æ—Ä –¥–µ–Ω–µ–≥", callback_data="fundraising")
    kb.button(text="–°—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º", callback_data="volunteer")
    kb.adjust(1)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø –±–æ—Ç –æ—Ç —Ç—É–±–∞, —Ç–≤–æ–π –æ—Ä–∏–µ–Ω—Ç–∏—Ä.\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=kb.as_markup()
    )


# ========== –í–µ—Ç–∫–∞: –ì–æ—Ç–æ–≤—ã–π —Å–±–æ—Ä –¥–µ–Ω–µ–≥ ==========
@dp.callback_query(F.data == "fundraising")
async def fundraising_handler(callback: CallbackQuery):
    kb = InlineKeyboardBuilder()
    kb.button(text="–í–Ω–µ—Å—Ç–∏ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ", callback_data="donate")
    kb.button(text="–í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="back_start")
    kb.adjust(1)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.as_markup())


@dp.callback_query(F.data == "donate")
async def donate_handler(callback: CallbackQuery):
    await callback.message.edit_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ üôè")


# ========== –í–µ—Ç–∫–∞: –í–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ ==========
@dp.callback_query(F.data == "volunteer")
async def volunteer_handler(callback: CallbackQuery, state: FSMContext):
    await state.set_state(VolunteerForm.name)
    await callback.message.edit_text("1. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")


@dp.message(VolunteerForm.name)
async def process_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(VolunteerForm.age)
    await message.answer("2. –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")


@dp.message(VolunteerForm.age)
async def process_age(message: Message, state: FSMContext):
    await state.update_data(age=message.text)
    await state.set_state(VolunteerForm.phone)
    await message.answer("3. –û—Å—Ç–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏")


@dp.message(VolunteerForm.phone)
async def process_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await state.set_state(VolunteerForm.topics)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
        reply_markup=get_topics_keyboard([])
    )


# --- –°–ª–æ–≤–∞—Ä—å —Ç–µ–º ---
TOPICS = {
    "topic_kid": "–ü–æ–º–æ—â—å –¥–µ—Ç—è–º –≤ –¥–µ—Ç. –¥–æ–º–∞—Ö/–±–æ–ª—å–Ω–∏—Ü–∞—Ö",
    "topic_online": "–ü–æ–º–æ—â—å –æ–Ω–ª–∞–π–Ω",
    "topic_pets": "–ü–æ–º–æ—â—å —Å –∂–∏–≤–æ—Ç–Ω—ã–º–∏",
    "topic_clean": "–ü–æ–º–æ—â—å –≤ –æ–±–ª–∞–≥–æ—Ä–∞–∂–∏–≤–∞–Ω–∏–∏ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π"
}


# --- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≥–∞–ª–æ—á–∫–∞–º–∏ ---
def get_topics_keyboard(selected: list[str]):
    kb = InlineKeyboardBuilder()
    for key, text in TOPICS.items():
        if key in selected:
            text = f"‚úÖ {text}"
        kb.button(text=text, callback_data=key)
    kb.button(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_topics")
    kb.adjust(1)
    return kb.as_markup()


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º–∞—Ç–∏–∫ ---
@dp.callback_query(F.data.in_(TOPICS.keys()))
async def select_topic(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected = data.get("topics", [])

    if callback.data in selected:
        selected.remove(callback.data)
    else:
        selected.append(callback.data)

    await state.update_data(topics=selected)

    await callback.message.edit_text(
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º–∞—Ç–∏–∫–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç–∏—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
        reply_markup=get_topics_keyboard(selected)
    )
    await callback.answer()


# --- –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ ---
@dp.callback_query(F.data == "finish_topics")
async def finish_form(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    name = data.get("name")
    age = data.get("age")
    phone = data.get("phone")
    topics = [TOPICS[t] for t in data.get("topics", [])]

    await callback.message.edit_text(
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!\n\n"
        f"üìå –ò–º—è: {name}\n"
        f"üìå –í–æ–∑—Ä–∞—Å—Ç: {age}\n"
        f"üìå –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üìå –¢–µ–º–∞—Ç–∏–∫–∏: {', '.join(topics) if topics else '–Ω–µ –≤—ã–±—Ä–∞–Ω—ã'}\n\n"
        f"–í –¥–∞–ª—å–Ω–µ–π—à–µ–º –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–µ–º–∞–º üôå"
    )
    await state.clear()


# ========== –û–±—â–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ ==========
@dp.callback_query(F.data == "back_start")
async def back_to_start(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await start_cmd(callback.message)


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
